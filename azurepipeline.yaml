trigger:
- master
variables:
  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: azure-dgv-mvp-sc
  - name: dockerRegistryServiceConnection
    value: azure-dgv-mvp-sc
  - name: tag
    value: $(Build.BuildId)
  - name: MajorVersion  
    value: 1

stages:
- stage: build
  jobs:
  - job: 
    displayName: build 
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
      
    # - script: |
    #     # npm install
    #     # npm run build
    #     # ls 
    #     # pwd
    #     # ls $(System.DefaultWorkingDirectory)/build
    #     echo build 
    #     echo build complete
    #   displayName: 'npm install and build'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'azure-dgv-acr-sc'
        repository: 'dgvmvp'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'mintnft-$(Build.BuildId)'
    - task: CmdLine@2
      inputs:
         script: |
           docker rmi dgvmvp.azurecr.io/dgvmvp:mintnft-$(Build.BuildId)

    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
      displayName: helm package

    - task: replacetokens@5
      inputs:
        rootDirectory: 'helm/'
        targetFiles: '**/Chart.yaml'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true

    
    - task: HelmDeploy@0
      inputs:
        command: 'package'
        chartPath: '**/helm'

    - task: CopyFiles@2
      displayName: 'Copy manifest files'
      inputs:
        SourceFolder: 'helm/'
        Contents: 'values.yaml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'
      condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'IndividualCI'))

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'


#     # - task: CopyFiles@2
#     #   inputs:
#     #     SourceFolder: '$(System.DefaultWorkingDirectory)/build'
#     #     Contents: '**'
#     #     TargetFolder: '$(build.artifactstagingdirectory)'
#     - task: PublishBuildArtifacts@1
#       displayName: publish artifact

- stage: MVP
  dependsOn: build
  condition: and(succeeded(), in(variables['Build.Reason'], 'Manual','IndividualCI'))
  variables:
  - group: dgv-mvp
  jobs:
    - deployment: MVP
      displayName: MVP
      pool: dgv-mvp-pool
      environment: MVP
      strategy:
       runOnce:
         deploy:
           steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Write your commands here
                  
                  echo 'Hello world MVP'
            - task: replacetokens@5
              inputs:
                rootDirectory: '$(Agent.BuildDirectory)/drop/'
                targetFiles: '*.yaml'
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'fail'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true
            - task: HelmDeploy@0
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'dgv-mvp-aks'
                namespace: 'dgv-backend'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Agent.BuildDirectory)/drop/dgv-mintnft-$(MajorVersion).$(Build.BuildId).tgz'
                releaseName: 'mintnft'
                valueFile: '$(Agent.BuildDirectory)/drop/values.yaml'